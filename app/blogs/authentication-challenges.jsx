"use client";

import React from "react";

const AuthenticationChallenges = () => {
  return (
    <>
      <p>
        Dise√±ar un sistema de autenticaci√≥n robusto fue uno de los mayores desaf√≠os t√©cnicos que enfrent√© como desarrollador backend. No se trata solo de "iniciar sesi√≥n", sino de garantizar seguridad, escalabilidad y una buena experiencia de usuario. En este art√≠culo, te comparto los errores, soluciones y aprendizajes que me marcaron.
      </p>

      <h2>üîê 1. ¬øPor qu√© no us√© autenticaci√≥n basada en sesiones?</h2>
      <p>
        Al principio, consider√© usar sesiones tradicionales con cookies. Sin embargo, el proyecto requer√≠a una <strong>API REST stateless</strong> que funcionara bien en entornos m√≥viles y web, por lo que opt√© por una soluci√≥n basada en <strong>JWT (JSON Web Tokens)</strong>.
      </p>
      <p>
        Esto permiti√≥ manejar la autenticaci√≥n en el cliente, evitando la necesidad de almacenar sesiones en el servidor.
      </p>

      <h2>‚ö†Ô∏è 2. El primer error: no usar refresh tokens</h2>
      <p>
        En mi primer intento, us√© JWTs con una expiraci√≥n larga (24h). Parec√≠a funcionar... hasta que quise implementar logout real. No hab√≠a forma de invalidar tokens activos sin una lista negra en el backend.
      </p>
      <p>
        Soluci√≥n: implement√© <strong>access tokens de corta duraci√≥n (15 min)</strong> y <strong>refresh tokens persistentes en una base de datos</strong>. Esto me dio control y seguridad, permitiendo revocar acceso si se detecta una anomal√≠a.
      </p>

      <h2>üîÅ 3. Ciclo completo de autenticaci√≥n</h2>
      <p>El flujo que implement√© fue el siguiente:</p>
      <ol className="list-decimal pl-6">
        <li>El usuario inicia sesi√≥n ‚Üí recibe un access token y un refresh token.</li>
        <li>El access token se usa en cada request protegido (en header Authorization).</li>
        <li>Cuando expira, el frontend usa el refresh token para obtener uno nuevo.</li>
        <li>El backend valida el refresh token (firmado + en base de datos) y genera un nuevo access token.</li>
      </ol>

      <h2>üõ°Ô∏è 4. Recomendaciones clave de seguridad</h2>
      <ul className="list-disc pl-6">
        <li>Los tokens deben estar firmados con una clave secreta robusta (preferiblemente con RS256 si usas OAuth).</li>
        <li>Los refresh tokens se almacenan cifrados y con una fecha de expiraci√≥n.</li>
        <li>El frontend debe almacenar el refresh token en cookies httpOnly y secure (no localStorage).</li>
        <li>Las rutas de refresco deben tener mecanismos de rate limiting.</li>
      </ul>

      <h2>üí• 5. Ataques que mitigamos</h2>
      <p>Durante las pruebas de seguridad, nos enfocamos en evitar:</p>
      <ul className="list-disc pl-6">
        <li><strong>Token theft:</strong> mitigado con cookies httpOnly y expiraci√≥n corta del access token.</li>
        <li><strong>Replay attacks:</strong> cada refresh token se rotaba en cada uso y se invalidaban los anteriores.</li>
        <li><strong>Brute force:</strong> protecci√≥n con rate limits y bloqueos temporales tras intentos fallidos.</li>
      </ul>

      <h2>üß™ 6. Testing del sistema</h2>
      <p>
        Us√© <strong>Jest</strong> para pruebas unitarias de la l√≥gica JWT, y <strong>Postman + Newman</strong> para pruebas de integraci√≥n. Tambi√©n document√© el flujo completo con Swagger/OpenAPI, facilitando su uso por otros desarrolladores del equipo.
      </p>

      <h2>üì¶ 7. Lecciones que aprend√≠</h2>
      <p>
        Uno de los mayores aprendizajes fue entender que la autenticaci√≥n no es una funcionalidad: es un sistema en s√≠ mismo. Invertir tiempo en dise√±arla bien desde el inicio evita brechas cr√≠ticas en producci√≥n.
      </p>
      <p>
        Adem√°s, aprend√≠ a balancear entre seguridad y experiencia de usuario: tokens demasiado cortos generan fricci√≥n; muy largos, vulnerabilidad.
      </p>

      <h2>‚úÖ Bonus: herramientas que us√©</h2>
      <ul className="list-disc pl-6">
        <li><strong>jsonwebtoken</strong>: para firmar/verificar JWTs</li>
        <li><strong>bcrypt</strong>: para encriptar contrase√±as</li>
        <li><strong>express-rate-limit</strong>: protecci√≥n ante ataques de fuerza bruta</li>
        <li><strong>dotenv</strong>: gesti√≥n de claves secretas</li>
      </ul>

      <h2>üß≠ Conclusi√≥n</h2>
      <p>
        Un sistema de autenticaci√≥n no solo protege tu aplicaci√≥n: protege la confianza de tus usuarios. Dise√±arlo bien es una inversi√≥n en estabilidad, seguridad y escalabilidad. Y si est√°s comenzando, empieza simple pero con visi√≥n de crecimiento.
      </p>
    </>
  );
};

export default AuthenticationChallenges;

