"use client";

import React from "react";

const FromIdeaToDeploy = () => {
  return (
    <article className="prose prose-invert lg:prose-lg max-w-none text-white/90 prose-h2:text-accent prose-strong:text-white prose-li:marker:text-accent prose-code:bg-zinc-800 prose-code:text-white prose-code:px-2 prose-code:py-1 prose-code:rounded-md prose-ul:pl-6 prose-p:leading-relaxed">
      <p>
        Todo gran producto digital nace de una chispa: una idea. Pero transformar esa idea en una soluci√≥n que impacte requiere mucho m√°s que escribir c√≥digo. En este art√≠culo comparto el enfoque que aplico como ingeniero de software y l√≠der t√©cnico para llevar proyectos desde cero hasta producci√≥n, con prop√≥sito, claridad y excelencia.
      </p>

      <h2>üöÄ 1. Empieza por una necesidad, no por la tecnolog√≠a</h2>
      <p>
        Cada soluci√≥n que construyo responde a un problema concreto. Inicio preguntando: <strong>¬øQu√© problema resuelve esto? ¬øPara qui√©n?</strong> Abro Notion y creo un espacio de exploraci√≥n: contexto, audiencia, dolores reales y objetivos claros. Esta etapa me permite alinear visi√≥n de negocio con experiencia de usuario desde el primer momento.
      </p>

      <h2>üß© 2. MVP con intenci√≥n: menos es m√°s</h2>
      <p>
        Con el "por qu√©" definido, dise√±o el <strong>Producto M√≠nimo Viable</strong>. Uso Figma para wireframes funcionales y flujos que prioricen valor. No busco perfecci√≥n visual, sino validaci√≥n r√°pida. Cada componente tiene un prop√≥sito, cada pantalla responde a una hip√≥tesis.
      </p>

      <h2>üõ† 3. Elegir el stack no es moda, es estrategia</h2>
      <p>No existe un stack universal, pero s√≠ uno que se ajusta a la naturaleza del producto, al equipo y al contexto. Estas son mis bases habituales:</p>
      <ul>
        <li><strong>Frontend:</strong> React + Next.js + Tailwind CSS</li>
        <li><strong>Backend:</strong> Node.js + Express o Firebase</li>
        <li><strong>Bases de datos:</strong> PostgreSQL o Firestore</li>
        <li><strong>Infraestructura:</strong> Vercel + Docker</li>
      </ul>

      <h2>üèó 4. Desarrollo √°gil, pero con estructura</h2>
      <p>
        El caos no es innovaci√≥n. Planifico con tableros Kanban en Notion, desgloso funcionalidades por valor y esfuerzo, y mantengo sprints con entregables claros. Documentaci√≥n viva (<code>README</code>, arquitectura, decisiones t√©cnicas) es parte esencial del proceso. Cada commit cuenta una historia (<code>feat:</code>, <code>fix:</code>, <code>refactor:</code>...).
      </p>

      <h2>üß™ 5. Calidad desde el inicio, no como parche</h2>
      <p>
        Aplico TDD cuando el proyecto lo amerita. Desde el d√≠a 1 uso:
      </p>
      <ul>
        <li><strong>Jest:</strong> Unit y logic tests</li>
        <li><strong>ESLint + Prettier:</strong> Est√°ndares y consistencia</li>
        <li><strong>Storybook:</strong> Componentes desacoplados y testables</li>
        <li><strong>Cypress:</strong> End-to-end en flujos cr√≠ticos</li>
      </ul>
      <p>
        La calidad no es una fase, es una cultura.
      </p>

      <h2>‚öôÔ∏è 6. CI/CD: despliegues como h√°bito, no como estr√©s</h2>
      <p>Configuro pipelines automatizados con GitHub Actions desde el primer sprint. Cada push a <code>main</code> dispara:</p>
      <ul>
        <li>Linting y testing</li>
        <li>Build optimizado de producci√≥n</li>
        <li>Deploy autom√°tico (Vercel o contenedor)</li>
      </ul>
      <p>Esto elimina el ‚Äúfunciona en mi m√°quina‚Äù y garantiza estabilidad continua.</p>

      <h2>üì£ 7. Feedback: escucho antes de iterar</h2>
      <p>
        El valor real viene del usuario, no del desarrollador. Por eso lanzo versiones tempranas, mido reacciones y recojo insights cualitativos y cuantitativos. El feedback es br√∫jula. Luego priorizo mejoras seg√∫n <strong>impacto vs esfuerzo</strong> y actualizo la hoja de ruta.
      </p>

      <h2>üí° Conclusi√≥n: construir con visi√≥n t√©cnica y prop√≥sito humano</h2>
      <p>
        Esta metodolog√≠a no solo me permite entregar productos funcionales, sino liderar con intenci√≥n. Soy un ingeniero que entiende el negocio, un estratega que dise√±a con datos y un desarrollador que crea con prop√≥sito. Porque m√°s all√° del stack, lo que realmente importa es el impacto que generamos.
      </p>
    </article>
  );
};

export default FromIdeaToDeploy;
